// SPDX-License-Identifier: MPL-2.0
//
// Copyright Â© 2025 RemasteredArch
//
// This Source Code Form is subject to the terms of the Mozilla Public License, version 2.0. If a
// copy of the Mozilla Public License was not distributed with this file, You can obtain one at
// <https://mozilla.org/MPL/2.0/>.

/// Define a list of standard [`Float`] types. Takes a list of tuples, holding either:
///
/// - `(#[attributes] unit, symbol, name single, name plural)`. The "unit" is the type name, and the
///   others refer to [`Float::SYMBOL`], [`Float::NAME_SINGLE`], and [`Float::NAME_PLURAL`],
///   respectively. A value for [`Float::NAME_PLURAL`] is optional, and will be generated by
///   appending an `'s'` onto [`Float::NAME_SINGLE`] if not explicitly provided.
/// - `(#[attributes] unit single, symbol)`. The "unit single" is the type name in singular form,
///   such that the actual type name can be formed by appending `'s'`, the singular unit name can be
///   generated by setting it to lowercase, and the plural name can be generated by setting it to
///   lowercase and appending `'s'`.
#[macro_export]
macro_rules! float_types {
    // Takes in a list of definitions, calls the implementation branches of this macro, then checks
    // that all the defined types are `Float + Send + Sync`.
    [ $((
        $(#[$attribute:meta])* $unit:ident, $( $rest:tt, )+
    ),)+ ] => {
        $(
            float_types!(
                @
                $(#[$attribute])*
                $unit,
                $($rest,)+
            );
        )+

        #[cfg(test)]
        mod _float_types_test {
            #[test]
            fn check_send_sync() {
                fn assert_send_sync<F: Send + Sync>() {}

                $( float_types!(@test $unit, $( $rest, )+); )+
            }
        }
    };

    // For explicitly defined types, just drop in the `$unit` identifier.
    (@test $unit:ident, $symbol:expr, $( $rest:tt, )+) => {
        ::paste::paste! {
            assert_send_sync::<super::$unit>();
            assert_send_sync::<super::Per<super::$unit, super::$unit, 1>>();
            assert_send_sync::<super::UncertainFloat<super::$unit>>();
        }
    };

    // For types generated from a singular string, append `'s'` to the `$unit` identifier.
    (@test $unit:ident, $symbol:expr,) => {
        ::paste::paste! {
            // This is now a plural identifier, call the regular branch for plural identifiers.
            float_types!(@test [<$unit s>], _, _,);
        }
    };


    // Matches on declarations that just have a unit identifier and a symbol, such that the
    // identifier can have an `'s'` appended to form the type's identifier, be set to lowercase to
    // form the unit's name, and be set to lowercase and an `'s'` appended to form the unit's plural
    // name. Also generates a documentation comment with a basic description.
    (@ $(#[$attribute:meta])* $unit_single:ident, $symbol:expr,) => {
        paste! {
            float_types!(
                @
                #[doc = "Represents " $unit_single:lower "s as a floating-point value."]
                $(#[$attribute])*
                [<$unit_single s>],
                $symbol,
                stringify!([< $unit_single:lower >]),
            );
        }
    };

    // Defines a [`Float`] type.
    (@ $(#[$attribute:meta])* $unit:ident, $symbol:expr, $name_single:expr, $name_plural:expr,) => {
        $(#[$attribute])*
        #[cfg_attr(any(feature = "serde", test), derive(Deserialize, Serialize))]
        #[derive(Copy, Clone, PartialEq, PartialOrd, Debug, Default)]
        pub struct $unit(f64);

        impl Float for $unit {
            const SYMBOL: Option<&str> = Some($symbol);
            const NAME_SINGLE: Option<&str> = Some($name_single);
            const NAME_PLURAL: Option<&str> = Some($name_plural);

            fn new(value: f64) -> Self {
                Self(value)
            }

            fn get(&self) -> f64 {
                self.0
            }
        }

        impl From<f64> for $unit {
            fn from(value: f64) -> Self {
                Self::new(value)
            }
        }

        impl From<$unit> for f64 {
            fn from(value: $unit) -> Self {
                value.get()
            }
        }
    };

    // Shorthand for a [`Float`] type definition for when the plural form of a unit is that unit
    // with an `'s'` at the end.
    (@ $(#[$attribute:meta])* $unit:ident, $symbol:expr, $name_single:expr,) => {
        float_types!(
            @
            $(#[$attribute])*
            $unit,
            $symbol,
            $name_single,
            concat!($name_single, "s"),
        );
    };
}

/// Defines conversions between units from a list of parentheses-wrapped conversions.
///
/// For each conversion, it expects `FromType * factor = ToType`. The factor may be wrapped in
/// parentheses to allow for something more complex than an [`f64`] literal. A conversion may also
/// include chaining, as in `FromType * factor = ToType * next_factor = NextToType`, which creates
/// conversions between `FromType * factor = ToType` and `ToType * next_factor = NextToType`. This
/// can be chained forever. In the future, I would also like it to create conversions between
/// _every_ item in the chain, e.g., `FromType * factor * next_factor = NextToType`.
///
/// A "conversion" of `FromType * factor = ToType` creates:
///
/// 1. `impl From<$FromType> for $ToType`
/// 2. `impl From<$ToType> for $FromType`
/// 3. `impl $FromType { const TO_<$TO_TYPE>: f64 = $factor; }`
/// 3. `impl $ToType { const TO_<$FROM_TYPE>: f64 = 1.0 / $factor; }`
#[macro_export]
macro_rules! conversions {
    // A series of conversions.
    [$(
        ( $(#[$attribute:meta])* $from:ident * $($rest:tt)+ ),
    )+] => {
        $(
            conversions!(@ $(#[$attribute])* $from * $($rest)+);
        )+
    };

    // Simple combined declaration, e.g., `Meters * 100.0 = Centimeters`.
    (@ $(#[$attribute:meta])* $from:ident * $factor:literal = $to:ident $(*)?) => {
        conversions!(@ $(#[$attribute])* $from * ($factor) = $to);
    };

    // Simple combined declaration with a more arbitrary factor, e.g.,
    // `Meters * (1.0 / 100.0) = Centimeters`.
    (@ $(#[$attribute:meta])* $from:ident * ($( $factor:tt )+) = $to:ident) => {
        conversions!(@@ $(#[$attribute])* $from * ($($factor)+) = $to);
        conversions!(@@ $(#[$attribute])* $to * (1.0 / $($factor)+) = $from);
    };

    // Complex combined declaration, recursively defining conversion factors.
    (@ $(#[$attribute:meta])* $from:ident * $factor:literal = $to:ident * $($rest:tt)+) => {
        conversions!(@ $(#[$attribute])* $from * ($factor) = $to);
        conversions!(@ $(#[$attribute])* $to * $( $rest )+);
    };

    // Complex combined declaration, recursively defining conversion factors, with more arbitrary
    // factors.
    (@ $(#[$attribute:meta])* $from:ident * ($( $factor:tt )+) = $to:ident * $($rest:tt)+) => {
        conversions!(@ $(#[$attribute])* $from * ($( $factor )+) = $to);
        conversions!(@ $(#[$attribute])* $to * $( $rest )+);
    };

    // Declaration of a single conversion of `from * factor = to`. Implements a const called
    // `TO_$TO` and implements `From<$from> for $to`.
    (@@ $(#[$attribute:meta])* $from:ident * ($( $factor:tt )+) = $to:ident) => {
        paste! {
            impl $from {
                #[doc = "Multiply a [`Self`] by this value to produce a [`" $to "`]."]
                $(#[$attribute])*
                pub const [<TO_ $to:snake:upper>]: f64 = $($factor)+;
            }

            impl From<$from> for $to {
                #[inline]
                fn from(value: $from) -> Self {
                    Self::new(value.get() * $from::[<TO_ $to:snake:upper>])
                }
            }
        }
    };
}
